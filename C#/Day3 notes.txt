Structures : are user defined value types 
        - are meant to group other related variables as one unit
        - are similar to C# classes except that they cannot participate in inheritance etc.

Enum : is a set of named constants
 - is a user defined value type
 - default type of enumeration list elements is int

Strings : Are collections of Characters
- Memory is allocated on the heap
- Is a predefined Reference type
- strings are immutable
- has fixed size

String builders : are mutable strings

Arrays : is a collection of values of same datatype
       - has a fixed size
       - are operated using the index or subscript value

int[] a = new int[5];
int[] a = new int[5]{1,2,3,4,5}
int[] a = new int[]={10,20,30,40,50};

Types of Arrays : 
   -Single dimension
   -Two/multidimension
   -Jagged :
       - are often called array of arrays
       - an element of a jagged array itself is an array
      
int[][] jarray = new int[3][]
jarray[0]=new int[]{1,2,3,4}
jarray[1]=new int[]{5,6,7}
jarray[2]=new int[]{8,9}


OO Programming :

-- is a software development methodology that is based on modelling a real-world system

Characteristics of Object Orientation :
  1. Realistic Model
  2. Reusability
  3. Resilience to change
  4. Existence in different forms

Consists of classes and objects
 car as a class
   - state
   - behaviour
   - message

JAM :
  A cell Phone : off, ring, vibrate, call
  A Stereo : play, off, pause, rewind, forward

1. Encapsulation : Unit of Information (members of the class with access modifiers)
2. Abstraction : Give Required Info. and hide the not required
3. Inheritance : Acquiring the members as a legacy (Single, Multilevel, Hybrid)
   
         'Is a' : 
         'has a ' : 

class Engine { }
class Car { }

   
4. Polymorphism : object existing in multiple forms
         1. Overloading : Function/Method Overloading
                          Operator Overloading
         2. Overriding    
 

A class is type that defines the various elements of program that we may want to have 
An object is the constructed class, which is usable 
(an object is an instance of the class)

Object is a root of all types
  - GetType
  - GetHashCode
  - Equals
  - ReferenceEquals
  - ToString

Constructors : Default constructor is provided by the framework/system, when we do not have our constructors

- Are Special Functions of a class
- To initialize the fields
- They have the same name as that of the class
- They do not have any return types
- They can be parameterized
- They may be overloaded
- They have to be either internal or public only
- They have to called explicitly

Order of constructor invocation is from the base class -> derived
and the destruction is opposite 

Access Specifiers :

All classes are internal by default. Can be changed to public
All members of the class are private by default, and can be changed as any one below :

1. Public : Public members are accessible anywhere (within the assembly or across assembly). We will have to refer the class where the members are declared and also be able to create an object of that class

2. Private : Private members are accessible only within the class they are declared

3. Protected : Protected members of a class are accessible to the class and all its derived classes (can be in the same or different assembly). With the derived class object, we shall be able to access the protected members

4. Internal : It acts exactly like the public specifier, but is accessible to both derived and non derived classes of the same assembly

5. Protected Internal or Internal Protected :Internal to all the derived and non-derived classes of the assembly and Protected to all the derived classes irrespective of the assembly


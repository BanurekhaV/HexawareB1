use HexaDB

--second highest problems
select * from employee
select e.empname,e.salary from employee e
where 2 =(select count(salary) from employee e1 where e1.Salary >=e.Salary)

select top 2 * from employee
order by salary desc

--to update a table using corelated subquery
--update salary of all employees, whose salary is the minimum in that department

update employee set salary = salary+100 from employee t1 
where salary <=(select min(t2.salary) from employee t2 where t2.Deptno=t1.Deptno)

--subqueries in from clause
update employee set salary=5000 where empid=2
update employee set deptno=4 where empid=9
select * from employee

--1. subquery to calculate average salary by department name
select d.deptname, avg_sal.AverageSalary
from 
     (select deptno, avg(salary)as AverageSalary from employee 
	        group by Deptno)as avg_sal
	join Department d on avg_sal.Deptno = d.Deptid

--rownumber() --allots row numbers based on an order (asc/desc)
select empname,salary,deptno,
ROW_NUMBER() over(order by salary desc) Rownumber
from employee

select empname,salary,deptno,
Rank() over(order by salary desc) Rownumber
from employee

select empname,salary,deptno,
dense_Rank() over(order by salary desc) Rownumber
from employee

--write a subquery to find top 3 highest salaries 
select empname,salary from (select empname,salary, row_number() over(order by salary desc) as Rownumber
from employee) as e where e.Rownumber <=3 

select empname,salary from (select e1.empname,e1.salary, dense_rank() over(order by salary desc) as Rn
from employee e1) as e where e.Rn <=3 


--union, union all,intersect, except

-- inorder to use set operators
 --  the resultset of both the queries must have the same number of columns
 --  the datatype of the columns retrieved by the top and the bottom query must be same
 --  If we want to sort the final resultset, then the order by clause must be given at the end of the query
 --  The positional ordering of the columns should match

 --union(no duplicates) and union all (include duplicates)
--works on one or more resultset

/*select colum1, col2,col3  from table1
   union / union all
   select col5,col6,col7 from table2
   order by col3
   */
   sp_help employee


   create table stdTabl1
   (StId int identity(1,1),
   sname varchar(30),
   grade char(1),
   percent_age int)

   create table stdTabl2
   (StId int identity(1,1),
   sname varchar(30),
   grade char(1),
   percent_age int)

   insert into stdTabl1 values('Gokul','A',90),('Hajira','A',80),('Harini','B',65),('Harini T P','B',60)
   insert into stdtabl2 values('Kamalesh','A',90),('Karthick','A',50),('Keertheesh','B',65),('Kevin','B',50)
  
  select * from stdTabl1
   select * from stdTabl2

   --union
   select grade,percent_age from stdTabl1
   union -- removes duplicate records
   select grade,percent_age from stdTabl2
   

   select grade,percent_age from stdTabl1
   union all   --includes duplicate records
   select grade,percent_age from stdTabl2
   
   
  select grade,percent_age from stdTabl1
  intersect
   select grade,percent_age from stdTabl2

   select grade,percent_age from stdTabl2
   except
   select grade,percent_age from stdTabl1
   
   --intersect vs inner join
   create table Customer
   (ID int, CustomerName varchar(30),Age int, City varchar(20))
   insert into customer values(100,'Rajesh',34,'Delhi'),(101,'Sumesh',31,'Nasik'),(102,'Harish',29,'Chennai')
   
   create table CustomerRating (CR_Id int, Cid int, CustBonus float)

   insert into CustomerRating  values(1,101,2000),(2,102,3000)

   select ID,Customername,custbonus from customer left join CustomerRating 
   on Customer.ID= CustomerRating.Cid
    intersect   
	 select ID,Customername,custbonus from customer right join CustomerRating 
   on Customer.ID= CustomerRating.Cid

   --while intersect and inner join returns the same output, but there may be some exceptions
   --intersect treats null values between 2 resultsets as being same and hence will not eliminate
   --inner join treats null values between 2 tables as being different, and hence can be eliminated

 --giving values to an identity column
 --1. seth the identity_insert on
 --2. provide column list
 
 select * from stdTabl2
 set identity_insert stdtabl2 off


 insert into stdtabl2 values('Miheer','D',75)

 --merge 
 /*syntax :
 merge into target_table
 using sourcetable
 on condition
 when matched then
   --dml operations
 when not matched then
    --dml;
--Guidelines for merge:
  1. Every merge statement must end with a semicolon
  2. It is mandatory to have one matched clause for merge to operate

  --optionally, we can use @@Rowcount after the merge, to find out how many records have been modified

  --sample tables for merge */
  create table Product_Target(P_Id int primary key, ProductName varchar(20),Price int)

  insert into Product_Target values(101,'Pencils', 10),(102,'Erasers',15),(103,'NoteBook',50)

  create table Product_Update(P_Id int primary key, ProductName varchar(20),Price int)
  insert into Product_Update values(101,'Pencils', 10),(102,'Erasers',25),(104,'MarkerPen',30)

  select * from Product_Target
  select * from Product_Update

--ETL 
--SCD (slowly changing dimensions)

use hexadb

select * from Product_Target
select * from Product_Update

update Product_Target set productname ='Eraser' where P_Id=102

--using merge
merge Product_Target as PT
using product_update as PU_Source
-- verify the P_Id being same
on (PT.P_Id = PU_Source.P_Id)
when matched
--1. we will perform update
  and PT.ProductName <> PU_Source.ProductName
  or PT.Price <> PU_Source.Price
  then update set PT.Productname = PU_Source.ProductName, PT.Price= PU_Source.Price
--2. Insertion
when not matched by Target then
 insert(P_ID,ProductName,price) values(PU_Source.P_Id,PU_Source.ProductName,PU_Source.Price)

--3. deletion
when not matched by Source
Then delete
--check what changes have happened post merge
output $action,
deleted.P_Id as del_P_id,
deleted.ProductName as del_Pname,
deleted.Price as del_price,
inserted.P_Id as Ins_P_Id,
inserted.ProductName as Ins_Productname,
inserted.Price as Ins_Price;


---------------------------------------------
insert into Product_Update values(106,'Ruler',20)
delete from Product_Update where P_id=106
update Product_Update set Price=80 where p_id=105


--ETL 
--SCD (slowly changing dimensions)

use hexadb

select * from Product_Target
select * from Product_Update

update Product_Target set productname ='Eraser' where P_Id=102

--using merge
merge Product_Target as PT
using product_update as PU_Source
-- verify the P_Id being same
on (PT.P_Id = PU_Source.P_Id)
when matched
--1. we will perform update
  and PT.ProductName <> PU_Source.ProductName
  or PT.Price <> PU_Source.Price
  then update set PT.Productname = PU_Source.ProductName, PT.Price= PU_Source.Price
--2. Insertion
when not matched by Target then
 insert(P_ID,ProductName,price) values(PU_Source.P_Id,PU_Source.ProductName,PU_Source.Price)

--3. deletion
when not matched by Source
Then delete
--check what changes have happened post merge
output $action,
deleted.P_Id as del_P_id,
deleted.ProductName as del_Pname,
deleted.Price as del_price,
inserted.P_Id as Ins_P_Id,
inserted.ProductName as Ins_Productname,
inserted.Price as Ins_Price;


---------------------------------------------
insert into Product_Update values(106,'Ruler',20)
delete from Product_Update where P_id=106
update Product_Update set Price=80 where p_id=105